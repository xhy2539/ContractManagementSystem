### Contract Management System API Tests

# ----------------------------------------------------------------------
# 环境和全局变量设置
# ----------------------------------------------------------------------
# 您的应用运行的基础URL
@baseUrl = http://localhost:8080

# 管理员凭据 (请根据您的实际配置修改)
@admin_username = admin
@admin_password = adminpassword

# 这个变量将由登录请求的响应处理器脚本设置，或者您可以手动设置一个从浏览器获取的有效JSESSIONID
@JSESSIONID_VALUE = YOUR_MANUALLY_COPIED_JSESSIONID_IF_NEEDED

# ----------------------------------------------------------------------
# 步骤 1: 用户登录 (获取会话 Cookie)
# ----------------------------------------------------------------------
# IntelliJ IDEA的HTTP Client会自动处理和存储在此请求之后收到的Cookie，
# 并在后续的请求中自动发送它们（只要它们在同一个 .http 文件中，
# 或者在启用了Cookie共享的环境中）。
#
# 登录成功后，服务器通常会通过 Set-Cookie 响应头设置 JSESSIONID。
# 登录处理URL是 /perform_login，成功后会重定向到 /dashboard。
POST {{baseUrl}}/perform_login
Content-Type: application/x-www-form-urlencoded

username={{admin_username}}&password={{admin_password}}

> {%
    // 响应处理器脚本：尝试从登录的 Set-Cookie 头中捕获 JSESSIONID
    // 这主要用于调试或如果您想在后续请求中显式使用该值。
    // IDEA的HTTP Client 通常会自动处理会话cookie。
    client.log("--- Login Request Completed ---");
    const setCookieHeader = response.headers.valueOf("Set-Cookie");
    if (setCookieHeader) {
        const match = setCookieHeader.match(/JSESSIONID=([^;]+)/);
        if (match && match[1]) {
            client.global.set("SESSION_ID_FROM_LOGIN", match[1]);
            client.log("JSESSIONID captured from login response: " + match[1]);
            client.log("This JSESSIONID should now be automatically used for subsequent requests by the HTTP Client.");
        } else {
            client.log("JSESSIONID not found in Set-Cookie header after login attempt.");
            client.log("Set-Cookie header was: " + setCookieHeader);
        }
    } else {
        client.log("No Set-Cookie header found in the response after login attempt.");
        client.log("Login response status: " + response.status);
        client.log("Login response headers: " + JSON.stringify(response.headers, null, 2));
    }
%}

### Separator for requests - Ensures cookies from login are used below
# (您可以将上面的登录请求单独运行一次，然后运行下面的请求)

# ----------------------------------------------------------------------
# 步骤 2: 测试受保护的API端点
# 这些请求应该会自动使用由上面登录请求建立的会话。
# ----------------------------------------------------------------------

###
# 1. 获取角色列表 API (/api/system/roles)
# 预期：HTTP 200 OK，返回分页的角色数据JSON。
# （数据库中应至少有 ROLE_ADMIN 和 ROLE_USER）
GET {{baseUrl}}/api/system/roles
Accept: application/json
# 如果IDEA的自动Cookie管理不起作用，或者您想显式使用上面捕获的ID：
# Cookie: JSESSIONID={{SESSION_ID_FROM_LOGIN}}

> {%
    client.log("--- Get Roles List Response ---");
    client.log("Status: " + response.status);
    client.log("Headers: " + JSON.stringify(response.headers, null, 2));
    client.log("Body: " + response.body);
%}

###
# 2. 获取角色列表 API - 带特定分页参数
# 预期：HTTP 200 OK，返回分页的角色数据JSON。
GET {{baseUrl}}/api/system/roles?page=0&size=5&sort=name,desc
Accept: application/json

> {%
    client.log("--- Get Roles List (Paged) Response ---");
    client.log("Status: " + response.status);
    client.log("Body: " + response.body);
%}

###
# 3. 获取用户列表 API (/api/system/users) - 默认分页
# 预期：HTTP 200 OK，返回分页的用户数据JSON。
# （数据库中应至少有 "admin" 用户）
GET {{baseUrl}}/api/system/users?page=0&size=10&sort=username,asc
Accept: application/json

> {%
    client.log("--- Get Users List Response ---");
    client.log("Status: " + response.status);
    client.log("Body: " + response.body);
%}

###
# （可选）4. 获取用户列表 API - 带搜索参数
# 仅当您在 UserManagementController 中为 usernameSearch/emailSearch 参数添加了实际的搜索逻辑时测试。
# 假设搜索用户名为 "admin"
# GET {{baseUrl}}/api/system/users?usernameSearch=admin&page=0&size=10&sort=username,asc
# Accept: application/json
#
# > {%
# client.log("--- Get Users List (Search) Response ---");
# client.log("Status: " + response.status);
# client.log("Body: " + response.body);
# %}