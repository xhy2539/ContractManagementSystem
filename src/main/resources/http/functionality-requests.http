### ======================================================================
### Stage 0: 登录 (每次测试会话开始前，务必先成功执行此请求)
### ======================================================================

# @name loginAdmin
POST http://localhost:8080/perform_login
Content-Type: application/x-www-form-urlencoded

username=admin&password=adminpassword

> {%
    client.log("登录请求完成。响应状态码: " + response.status);
    if (response.status === 302 || (response.status === 200 && response.headers.valueOf("Content-Type").includes("text/html"))) {
        var cookies = response.headers.valuesOf("Set-Cookie");
        var sessionCookieFound = false;
        for (var i = 0; i < cookies.length; i++) {
            if (cookies[i].includes("JSESSIONID")) {
                sessionCookieFound = true;
                break;
            }
        }
        if (sessionCookieFound) {
            client.log("登录成功，JSESSIONID cookie 已设置。");
        } else {
            client.log("登录响应中未找到 JSESSIONID cookie，请检查登录配置和响应。");
        }
    } else {
        client.log("登录失败，请检查凭据和服务器日志。状态码: " + response.status);
        client.log("响应体：" + JSON.stringify(response.body));
    }
%}

################################################################################
### Stage 1: 测试功能创建 (POST /api/system/functionalities)
################################################################################

### 1.1 成功创建一个新功能 (使用动态变量确保唯一性) 并捕获其 ID
# @name createFunctionalityOne
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "FNC-{{$randomInt}}",
  "name": "功能_{{$timestamp}}",
  "url": "/func/{{$guid}}",
  "description": "这是一个动态创建的功能一"
}

> {%
    if (response.body && response.body.id) {
        client.global.set("funcOneId", response.body.id.toString());
        client.log("捕获到 funcOneId: " + response.body.id + " (Name: " + response.body.name + ", Num: " + response.body.num + ")");
    } else {
        client.log("错误：创建功能一后未能从响应体中捕获ID。状态码: " + response.status + "，响应体: " + JSON.stringify(response.body));
    }
%}

### 1.2 测试校验：功能编号为空 (预期 400 Bad Request)
# @name createFunctionalityFailNumBlank
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "",
  "name": "功能编号为空_{{$timestamp}}",
  "url": "/func/numnull",
  "description": "测试num为空"
}

### 1.3 测试校验：功能名称为空 (预期 400 Bad Request)
# @name createFunctionalityFailNameBlank
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "FNC-{{$randomInt}}-NB",
  "name": "",
  "url": "/func/namenull",
  "description": "测试name为空"
}

### 1.4 测试校验：功能编号过长 (预期 400 Bad Request, 假设DTO中max=20)
# @name createFunctionalityFailNumTooLong
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "THIS_NUMBER_IS_WAY_TOO_LONG_FOR_THE_COLUMN_MAX_LENGTH_CONSTRAINT_CHECK_{{$randomInt}}",
  "name": "功能编号过长测试_{{$timestamp}}",
  "url": "/func/numtoolong",
  "description": "测试num过长"
}

### 1.5 创建第二个功能 (使用动态变量)，用于后续测试删除并捕获其 ID
# @name createFunctionalityTwo
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "FNC-{{$randomInt}}-TWO",
  "name": "功能_{{$timestamp}}_TWO",
  "url": "/func/{{$guid}}",
  "description": "这是动态创建的功能二"
}

> {%
    if (response.body && response.body.id) {
        client.global.set("funcThreeId", response.body.id.toString()); // 注意这里用 funcThreeId 对应之前的脚本
        client.log("捕获到 funcThreeId: " + response.body.id + " (Name: " + response.body.name + ", Num: " + response.body.num + ")");
    } else {
        client.log("错误：创建功能二后未能从响应体中捕获ID。状态码: " + response.status + "，响应体: " + JSON.stringify(response.body));
    }
%}

### 1.6 尝试创建与刚刚创建的 {{funcOneId}} 编号相同的功能 (预期 409 Conflict)
###     这个测试需要在 funcOneId 成功设置后运行
# @name createFunctionalityDuplicateNum
POST http://localhost:8080/api/system/functionalities
Content-Type: application/json

{
  "num": "{{funcOneIdNum}}",
  "name": "功能一重复编号_{{$timestamp}}",
  "url": "/func/one_dup_num",
  "description": "尝试创建重复编号的功能"
}



################################################################################
### Stage 2: 测试获取功能 (GET /api/system/functionalities)
################################################################################

### 2.1 获取所有功能列表
# @name getAllFunctionalities
GET http://localhost:8080/api/system/functionalities


### 2.2 根据 ID 获取已存在的功能 (使用环境变量 funcOneId)
# @name getFunctionalityByIdSuccess
GET http://localhost:8080/api/system/functionalities/{{funcOneId}}


### 2.3 根据 ID 获取不存在的功能 (预期 404 Not Found)
# @name getFunctionalityByIdNotFound
GET http://localhost:8080/api/system/functionalities/99999


################################################################################
### Stage 3: 测试更新功能 (PUT /api/system/functionalities/{id})
################################################################################

### 3.1 成功更新功能 (使用环境变量 funcOneId)
# @name updateFunctionalitySuccess
PUT http://localhost:8080/api/system/functionalities/{{funcOneId}}
Content-Type: application/json

{
  "num": "FNC-{{funcOneId}}-UPD",
  "name": "功能_{{funcOneId}} (已更新)",
  "url": "/func/one/updated_{{$randomInt}}",
  "description": "这是功能 {{funcOneId}} 更新后的描述"
}

### 3.2 更新功能时，编号与现有其他功能冲突 (预期 409 Conflict)
###      假设 funcThreeId 存在，我们尝试将 funcOneId 的编号改为 funcThreeId 的 num
###      这需要先捕获 funcThreeId 的 num
# @name updateFunctionalityFailNumDuplicate
# 前提：先运行 createFunctionalityTwo 并捕获其 num 到 client.global.set("funcThreeNum", response.body.num);
PUT http://localhost:8080/api/system/functionalities/{{funcOneId}}
Content-Type: application/json

{
  "num": "{{funcThreeNum}}",
  "name": "功能一 (尝试重复编号)_{{$timestamp}}",
  "url": "/func/one/dup_num_upd",
  "description": "尝试更新为已存在的编号"
}

### 3.3 更新不存在的功能 (预期 404 Not Found)
# @name updateFunctionalityNotFound
PUT http://localhost:8080/api/system/functionalities/99999
Content-Type: application/json

{
  "num": "FNC999",
  "name": "尝试更新不存在的功能",
  "url": "/func/notfound_upd",
  "description": "这个功能不存在"
}


################################################################################
### Stage 4: 测试删除功能 (DELETE /api/system/functionalities/{id})
################################################################################

### 4.1 成功删除未被关联的功能 (使用环境变量 funcThreeId)
# @name deleteFunctionalitySuccess
DELETE http://localhost:8080/api/system/functionalities/{{funcThreeId}}


### 4.3 删除不存在的功能 (预期 404 Not Found)
# @name deleteFunctionalityNotFound
DELETE http://localhost:8080/api/system/functionalities/99999


################################################################################
### Stage 5: 清理 (可选，删除在测试中创建的 funcOneId)
################################################################################

### 5.1 删除之前创建的 funcOneId (如果它还存在的话)
# @name cleanupFuncOne
DELETE http://localhost:8080/api/system/functionalities/{{funcOneId}}